install ("ggplot2")
install.packages("ggplot2")
q()
install.packages("ggplot2")
q
q()
find.package("devtools")
install.packages("devtools")
q()
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("pkgbuild")
library (pkgbuild)
install.packages("devtools")
update.packages(ask='graphics',checkBuilt=TRUE)
library(devtools)
find_rtools()
q()
load("C:/Users/LeninGrib/Desktop/DS/R/wp.RData")
install.packages("RMySQL", type = "source")
Sys.getenv('MYSQL_HOME')
setwd("C:/Users/LeninGrib/Desktop/DS/R/course5/cp2")
library(plyr)
library(dplyr)
storms <- tbl_df(read.csv("storms.bz2"))
names(storms)<- tolower(make.names(names(storms), unique = T, allow_ = F))
storms <- storms %>%
mutate(propdmg.m = with(., case_when(
(propdmgexp == "h" | propdmgexp == "H")~2,
(propdmgexp == "k" | propdmgexp == "K")~3,
(propdmgexp == "m" | propdmgexp == "M")~6,
(propdmgexp == "b" | propdmgexp == "B")~9,
(propdmgexp %in% c("","0","-"))~1,
(propdmgexp %in% as.character(1:9))~ as.numeric(as.character(propdmgexp)))))
storms<- storms %>% mutate(propdmg.v = propdmg*10^propdmg.m)
storms <- storms %>%
mutate(cropdmg.m = with(., case_when(
(cropdmgexp == "h" | cropdmgexp == "H")~2,
(cropdmgexp == "k" | cropdmgexp == "K")~3,
(cropdmgexp == "m" | cropdmgexp == "M")~6,
(cropdmgexp == "b" | cropdmgexp == "B")~9,
(cropdmgexp %in% c("","0","-"))~1,
(cropdmgexp %in% as.character(1:9))~ as.numeric(as.character(cropdmgexp)))))
storms<- storms %>% mutate(cropdmg.v = cropdmg*10^cropdmg.m)
storms.toph <- storms %>%
group_by(evtype) %>%
summarize(total = sum(fatalities,injuries)) %>%
top_n(10, wt = total)
storms.toph
?arrange
storms.toph <- storms %>%
group_by(evtype) %>%
summarize(total = sum(fatalities,injuries)) %>%
top_n(10, wt = total) %>%
arrange (desc())
storms.toph
storms.toph <- storms %>%
group_by(evtype) %>%
summarize(total = sum(fatalities,injuries)) %>%
top_n(10, wt = total) %>%
arrange (desc(total))
storms.toph
storms.mh <- storms %>%
group_by(evtype) %>%
summarise(total = sum(fatalities,injuries),count = n())
storms.mh
summary(storms.mh$count)
storms.mh <- storms.mh %>%
mutate (average = total/n) %>%
top_n(10)
storms.mh <- storms.mh %>%
mutate (average = as.numeric(total)/n) %>%
top_n(10)
storms.mh <- storms.mh %>%
mutate (.,average = as.numeric(total)/n) %>%
top_n(10)
storms.mh <- storms.mh %>%
mutate (.,average = total / n) %>%
top_n(10)
storms.mh <- storms.mh %>%
mutate (mean = total / n) %>%
top_n(10)
storms.mh <- storms %>%
group_by(evtype) %>%
summarise(average = mean(fatalities+injuries))
storms.mh
storms.mh <- storms %>%
group_by(evtype) %>%
summarise(average = mean(fatalities+injuries))%>%
top_n(10) %>%
arrange(desc(average))
storms.mh
storms.mh <- storms %>%
group_by(evtype) %>%
summarise(average = mean(fatalities+injuries))%>%
arrange(desc(average))
storms.mh
storms.toph
storms.mh$average[which(storms.mh$evtype == "TORNADO")]
storms$fatalities[which(storms.mh$evtype == "TORNADO")]
storms.mh$average[which(storms$evtype == "TORNADO")]
storms.mh <- storms %>%
group_by(evtype) %>%
summarise(average = mean(fatalities+injuries, na.rm = T))%>%
arrange(desc(average))
storms.mh
storms.mh$average[which(storms$evtype == "Heat Wave")]
storms$fatalities[which(storms$evtype == "Heat Wave")]
storms$injuries[which(storms$evtype == "Heat Wave")]
storms.topprop <- storms %>%
group_by(evtype) %>%
summarize(total = sum(propdmg.v)) %>%
top_n(10) %>%
arrange (desc(total))
storms.topprop
storms.topcrop <- storms %>%
group_by(evtype) %>%
summarize(total = sum(cropdmg.v)) %>%
top_n(10) %>%
arrange (desc(total))
storms.topcrop
storms.topprop <- storms %>%
group_by(evtype) %>%
summarize(totalprop = sum(propdmg.v), totalcrop = sum(cropdmg.v), total = sum(propdmg.v+cropdmg.v)) %>%
top_n(10) %>%
arrange (desc(total))
storms.topprop
storms.topprop <- storms %>%
group_by(evtype) %>%
summarize(totalprop = sum(propdmg.v), totalcrop = sum(cropdmg.v), total = sum(propdmg.v+cropdmg.v)) %>%
top_n(10, wt = total) %>%
arrange (desc(total))
storms.topprop
storms.topprop <- storms %>%
group_by(evtype) %>%
summarize(totalprop = sum(propdmg.v), totalcrop = sum(cropdmg.v), total = sum(propdmg.v+cropdmg.v)) %>%
top_n(20, wt = total) %>%
arrange (desc(total))
storms.topprop
library(ggplot2)
ggplot(data=storms.topprop, aes(x=evtype, y=total)) +
geom_bar(stat="identity") + geom_line(aes(y = totalprop, colour = "blue")) + geom_line(aes(y = totalcrop, colour = "green"))
ggplot(data=storms.econ, aes(x=evtype, y=total)) +
geom_bar(stat="identity") + geom_line(aes(y = totalprop, colour = "blue"))
storms.econ <- storms %>%
group_by(evtype) %>%
summarize(totalprop = sum(propdmg.v), totalcrop = sum(cropdmg.v), total = sum(propdmg.v+cropdmg.v)) %>%
top_n(20, wt = total) %>%
arrange (desc(total))
ggplot(data=storms.econ, aes(x=evtype, y=total)) +
geom_bar(stat="identity") + geom_line(aes(y = totalprop, colour = "blue"))
ggplot(data=storms.econ, aes(x=evtype, y=total)) +
geom_bar(stat="identity")
storms.econ <- storms %>%
group_by(evtype) %>%
summarize(totalprop = sum(propdmg.v), totalcrop = sum(cropdmg.v), total = sum(propdmg.v+cropdmg.v)) %>%
top_n(10, wt = total) %>%
arrange (desc(total))
ggplot(data=storms.econ, aes(x=evtype, y=total)) +
geom_bar(stat="identity") + labs(title="Weather event types with most roperty and crop damage", y="Loss, USD", x = "Event Type") + theme(axis.text.x = element_text(angle = 90, vjust=0.5)
)
ggplot(data=storms.econ, aes(x=reorder(evtype, -total), y=total)) +
geom_bar(stat="identity") +
labs(title="Weather event types with most roperty and crop damage",
y="Loss, USD",
x = "Event Type") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
ggplot(data=storms.econ, aes(x=reorder(evtype, -total), y=total/1000000)) +
geom_bar(stat="identity") +
labs(title="Weather event types with most property and crop damage",
y="Loss, mln USD",
x = "Event Type") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
ggplot(data=storms.econ, aes(x=reorder(evtype, -total), y=total/1000000000)) +
geom_bar(stat="identity") +
labs(title="Weather event types with most property and crop damage",
y="Loss, bln USD",
x = "Event Type") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
storms.econ
storms.econ$evtype[which.max(storms.econ$totalcrop)]
